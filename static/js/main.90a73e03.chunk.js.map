{"version":3,"sources":["components/yandex_map/ItemTypes.js","components/yandex_map/Mark.jsx","components/yandex_map/MarkList.jsx","components/yandex_map/MarkListContainer.jsx","components/yandex_map/YMap.jsx","components/YandexMap.jsx","App.js","serviceWorker.js","index.js"],"names":["Mark","mark","deletePoint","moveMark","index","ref","useRef","useDrop","accept","ItemTypes","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","id","useDrag","type","drag","className","title","onClick","PointList","marks","map","key","Container","state","inputValue","handleInputChange","event","setState","target","value","handleInputEnter","props","addMark","removeMark","autoComplete","placeholder","this","onChange","onKeyPress","backend","HTML5Backend","MarkList","Component","YMap","setAddress","axios","get","apikey","geometry","then","res","address","data","response","GeoObjectCollection","featureMember","GeoObject","name","forceUpdate","onDragEnd","getCoordinates","getAllCoordinates","length","getCenter","changeApiKey","React","createRef","forEach","mapDefaultState","mapWidth","mapHeight","defaultState","style","height","width","instanceRef","options","draggable","modules","properties","hintContent","balloonContent","coordinates","strokeWidth","strokeColor","strokeOpacity","display","flexDirection","rel","href","textDecoration","YandexMap","arrMarks","getMarks","find","val","num","splice","marksArray","slice","MarkListContainer","center","zoom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90a73e03.chunk.js","sourcesContent":["export default {\n  MARK: 'mark',\n}","import React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\n\nconst Mark = ({ mark, deletePoint, moveMark, index }) => {\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: ItemTypes.MARK,\n    hover(item, monitor) {\n      if (!ref.current) {\n        return\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      if (dragIndex === hoverIndex) {\n        return\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n      moveMark(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n  });\n  const id = mark.id;\n  const [, drag] = useDrag({\n    item: { type: ItemTypes.MARK, id, index },\n  });\n  drag(drop(ref));\n  return (\n    <div className=\"point-item\" ref={ref}>\n      <p className=\"point-name\">{mark.title}</p>\n      <span className=\"point-delete\" onClick={deletePoint}>x</span>\n    </div>\n  );\n}\n\nexport default Mark","import React from 'react';\n\nimport Mark from './Mark';\n\nconst PointList = ({ marks, deletePoint, moveMark }) => {\n  return (\n    <div className=\"point-list\">\n      {marks.map((mark, index) => (\n        <Mark \n          key={`point-${index}`} \n          mark={mark} \n          deletePoint={() => { deletePoint(mark) }} \n          moveMark={moveMark} \n          index={index}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default PointList;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\nimport MarkList from './MarkList';\n\nclass Container extends Component {\n  state = {\n    inputValue: '',\n  };\n\n  handleInputChange = event => {\n    this.setState({\n      inputValue: event.target.value\n    });\n  };\n\n  handleInputEnter = event => {\n    if (event.key === 'Enter') {\n      const title = event.target.value;\n      this.setState({\n        inputValue: '',\n      });\n      this.props.addMark(title);\n    }\n  };\n\n  deletePoint = mark => {\n    this.props.removeMark(mark);\n  }\n\n  render() {\n    return (\n      <div className=\"point-list-container\">\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"press enter to add point\"\n          value={this.state.inputValue}\n          onChange={this.handleInputChange}\n          onKeyPress={this.handleInputEnter}\n        />\n        <DndProvider backend={HTML5Backend}>\n          <MarkList {...this.props} deletePoint={this.deletePoint} />\n        </DndProvider>\n      </div>\n    );\n  }\n}\n\nContainer.propTypes = {\n  addMark: PropTypes.func.isRequired,\n  removeMark: PropTypes.func.isRequired,\n  moveMark: PropTypes.func.isRequired,\n  marks: PropTypes.array.isRequired,\n}\n\nexport default Container;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { YMaps, Map, Placemark, Polyline } from 'react-yandex-maps';\nimport axios from 'axios';\n\nclass YMap extends Component {\n  constructor(props) {\n    super(props);\n    this.map = React.createRef();\n    this.state = {\n      apikey: '',\n    }\n  }\n\n  componentDidUpdate() {\n    this.props.marks.forEach(mark => {\n      if (!mark.geometry || mark.geometry.length === 0) {\n        mark.geometry = this.map.current.getCenter();\n        this.setAddress(mark);\n      }\n    });\n  }\n\n  setAddress = mark => {\n    axios.get(`https://geocode-maps.yandex.ru/1.x/?apikey=${this.state.apikey}&geocode=${mark.geometry[1]},${mark.geometry[0]}&results=1&format=json`)\n\t\t.then(res => {\n\t\t  const address = res.data.response.GeoObjectCollection.featureMember[0].GeoObject.name;\n\t\t  if (address) {\n        mark.address = address;\n        this.forceUpdate();\n\t\t\t}\n\t\t});\n  }\n\n  onDragEnd = (event, mark) => {\n    mark.geometry = event.get('target').geometry.getCoordinates();\n    this.setAddress(mark);\n  }\n\n  getAllCoordinates = () => {\n    return this.props.marks.map(mark => {\n      if (mark.geometry && mark.geometry.length !== 0) {\n        return mark.geometry;\n      }\n      return this.map.current.getCenter();\n    });\n\t}\n\t\n\tchangeApiKey = event => {\n    this.setState({\n      apikey: event.target.value\n    });\n  };\n\n  render() {\n    const { marks, mapDefaultState, mapWidth, mapHeight } = this.props;\n    return (\n\t\t\t<Fragment>\n\t\t\t\t<div className=\"yandex-map-container\">\n\t\t\t\t\t<YMaps>\n\t\t\t\t\t\t<Map defaultState={mapDefaultState} style={{ height: mapHeight, width: mapWidth }} instanceRef={this.map}>\n\t\t\t\t\t\t\t{marks.map((mark, index) => (\n\t\t\t\t\t\t\t\t<Placemark \n\t\t\t\t\t\t\t\t\tgeometry={mark.geometry}\n\t\t\t\t\t\t\t\t\toptions={{ draggable: true }} \n\t\t\t\t\t\t\t\t\tkey={`${mark.title}-${index}`} \n\t\t\t\t\t\t\t\t\tonDragEnd={event => { this.onDragEnd(event, mark) }}\n\t\t\t\t\t\t\t\t\tmodules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\n\t\t\t\t\t\t\t\t\tproperties={{\n\t\t\t\t\t\t\t\t\t\thintContent: mark.address,\n\t\t\t\t\t\t\t\t\t\tballoonContent: `<p>${mark.title}</p><p>${mark.address}</p>`,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<Polyline\n\t\t\t\t\t\t\t\tgeometry={{\n\t\t\t\t\t\t\t\t\ttype: 'LineString',\n\t\t\t\t\t\t\t\t\tcoordinates: this.getAllCoordinates(),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\tstrokeWidth: 4,\n\t\t\t\t\t\t\t\t\tstrokeColor: '000000',\n\t\t\t\t\t\t\t\t\tdraggable: false,\n\t\t\t\t\t\t\t\t\tstrokeOpacity: 0.5,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Map>\n\t\t\t\t\t</YMaps>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"api\" style={{ display: 'flex', flexDirection: 'column' }}>\n\t\t\t\t\t<p>API_KEY:</p>\n\t\t\t\t\t<input onChange={event => { this.changeApiKey(event) }}/>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://yandex.ru/dev/locator/keys/get/\"  style={{ textDecoration: 'none' }}>Get yandex api key</a>\n        </div>\n\t\t\t</Fragment>\n\n    );\n  }\n}\n\nYMap.propTypes = {\n  marks: PropTypes.array.isRequired,\n  mapDefaultState: PropTypes.object.isRequired,\n  mapWidth: PropTypes.string.isRequired,\n  mapHeight: PropTypes.string.isRequired,\n}\n\nexport default YMap;","import React, { Component, Fragment } from 'react';\n\nimport MarkListContainer from './yandex_map/MarkListContainer';\nimport YMap from './yandex_map/YMap';\n\nclass YandexMap extends Component {\n\tstate = {\n\t\t\tmarks: [],\n\t}\n\n\t// ACTIONS\n\taddMark = title => {\n\t\t\tconst arrMarks = this.getMarks();\n\t\t\tconst index = this.state.marks.length;\n\t\t\tconst mark = {\n\t\t\t\t\ttitle: title,\n\t\t\t\t\tid: index,\n\t\t\t\t\tgeometry: [],\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\t\tmarks: [...arrMarks, mark],\n\t\t\t})\n\t}\n\n\tremoveMark = mark => {\n\t\tlet arrMarks = this.getMarks();\n\t\tlet index = 0;\n\t\tarrMarks.find((val, num) => {\n\t\t\tif (val.id === mark.id) {\n\t\t\t\tindex = num;\n\t\t\t}\n\t\t\treturn val.id === mark.id\n\t\t});\n\t\tarrMarks.splice(index, 1);\n\t\tthis.setState({\n\t\t\t\tmarks: arrMarks,\n\t\t})\n\t}\n\n\tmoveMark = (dragIndex, hoverIndex) => {\n\t\tlet marksArray = this.getMarks();\n\t\tconst mark = marksArray[dragIndex];\n\t\tmarksArray.splice(dragIndex, 1);\n\t\tmarksArray.splice(hoverIndex, 0, mark);\n\t\tthis.setState({\n\t\t\tmarks: marksArray,\n\t\t});\n\t}\n\n\t// GETTERS\n\tgetMarks = () => {\n\t\t\tconst arrMarks = this.state.marks.slice();\n\t\t\treturn arrMarks;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t\t<MarkListContainer\n\t\t\t\t\t\t\t\taddMark={this.addMark}\n\t\t\t\t\t\t\t\tremoveMark={this.removeMark}\n\t\t\t\t\t\t\t\tmoveMark={this.moveMark}\n\t\t\t\t\t\t\t\tmarks={this.getMarks()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<YMap\n\t\t\t\t\t\t\t\tmarks={this.getMarks()}\n\t\t\t\t\t\t\t\tmapDefaultState={{ center: [55.75, 37.57], zoom: 11 }}\n\t\t\t\t\t\t\t\tmapWidth={'400px'}\n\t\t\t\t\t\t\t\tmapHeight={'400px'}\n\t\t\t\t\t\t/>\n\t\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nexport default YandexMap;","import React, { Component } from 'react';\nimport './app.css';\nimport YandexMap from './components/YandexMap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <YandexMap />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}